{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["renderer","marked","Renderer","image","arguments","App","props","state","rawInput","defaultText","markedContent","DOMPurify","sanitize","gfm","breaks","handleChange","bind","event","this","setState","target","value","className","href","rel","InputContainer","header","PreviewContainer","React","Component","htmlFor","id","rows","onChange","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAIMA,EAAW,IAAIC,IAAOC,SAC5BF,EAASG,MAAQ,WACf,MAAM,aAAN,OAAoBC,UAAU,GAA9B,kBAA0CA,UAAU,GAApD,0B,IAGIC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,EACVC,cAAeC,IAAUC,SACvBX,IAAOQ,EAAa,CAAEI,KAAK,EAAMC,QAAQ,EAAMd,SAAUA,MAG7D,EAAKe,aAAe,EAAKA,aAAaC,KAAlB,gBARH,E,yDAWNC,GACXC,KAAKC,SAAS,CACZX,SAAUS,EAAMG,OAAOC,MACvBX,cAAeC,IAAUC,SACvBX,IAAOgB,EAAMG,OAAOC,MAAO,CAAER,KAAK,EAAMC,QAAQ,EAAMd,SAAUA,S,+BAMpE,OACE,yBAAKsB,UAAU,uBACb,wBAAIA,UAAU,kCAAd,qBAEE,2BAAOA,UAAU,cAAjB,OAAkC,uBAAGC,KAAK,gCAAgCH,OAAO,SAASI,IAAI,uBAA5D,gBAEpC,6BACA,yBAAKF,UAAU,OACb,kBAACG,EAAD,CACEC,OAAO,eACPX,aAAcG,KAAKH,aACnBP,SAAUU,KAAKX,MAAMC,WAEvB,kBAACmB,EAAD,CACED,OAAO,iBACPhB,cAAeQ,KAAKX,MAAMG,sB,GArCpBkB,IAAMC,WA6CxB,SAASJ,EAAenB,GACtB,OACE,yBAAKgB,UAAU,UACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,qCAAoC,uBAAGA,UAAU,uBAA0B,IAAMhB,EAAMoB,QACtG,yBAAKJ,UAAU,aACb,8BACE,yBAAKA,UAAU,cACb,2BAAOQ,QAAQ,UAAf,4BACA,8BACER,UAAU,eACVS,GAAG,SACHC,KAAK,KACLC,SAAU3B,EAAMS,aAChBM,MAAOf,EAAME,gBAU7B,SAASmB,EAAiBrB,GACxB,OACE,yBAAKgB,UAAU,UACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,uCAAsC,uBAAGA,UAAU,kBAAqB,IAAMhB,EAAMoB,QACnG,yBAAKJ,UAAU,aACb,yBACES,GAAG,UACHG,wBAAyB,CAAEC,OAAQ7B,EAAMI,oBAQrD,IAAMD,EAAW,syBAoCFJ,ICtHK+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c91b3ac.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\nimport DOMPurify from 'dompurify';\n\nconst renderer = new marked.Renderer();\nrenderer.image = function () {\n  return `<img alt=\"${arguments[2]}\" src=\"${arguments[0]}\" class=\"img-fluid\" >`;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rawInput: defaultText,\n      markedContent: DOMPurify.sanitize(\n        marked(defaultText, { gfm: true, breaks: true, renderer: renderer})\n      ),\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      rawInput: event.target.value,\n      markedContent: DOMPurify.sanitize(\n        marked(event.target.value, { gfm: true, breaks: true, renderer: renderer })\n      ),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid p-4\">\n        <h1 className=\"text-center display-6 q-header\">\n          Markdown previewer\n          <small className=\"text-muted\"> by <a href=\"https://github.com/qvistdev09\" target=\"_blank\" rel=\"noopener noreferrer\">qvistdev09</a></small>\n          </h1>\n        <hr />\n        <div className=\"row\">\n          <InputContainer\n            header=\"Input window\"\n            handleChange={this.handleChange}\n            rawInput={this.state.rawInput}\n          />\n          <PreviewContainer\n            header=\"Preview window\"\n            markedContent={this.state.markedContent}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction InputContainer(props) {\n  return (\n    <div className=\"col-sm\">\n      <div className=\"card shadow-sm mb-4\">\n        <div className=\"card-header bg-primary text-white\"><i className=\"fas fa-info-circle\"></i>{\" \" + props.header}</div>\n        <div className=\"card-body\">\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"editor\">Write your markdown here</label>\n              <textarea\n                className=\"form-control\"\n                id=\"editor\"\n                rows=\"15\"\n                onChange={props.handleChange}\n                value={props.rawInput}\n              ></textarea>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PreviewContainer(props) {\n  return (\n    <div className=\"col-sm\">\n      <div className=\"card shadow-sm\">\n        <div className=\"card-header bg-secondary text-white\"><i className=\"fas fa-images\"></i>{\" \" + props.header}</div>\n        <div className=\"card-body\">\n          <div\n            id=\"preview\"\n            dangerouslySetInnerHTML={{ __html: props.markedContent }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst defaultText = `# This is a header\n## And this is a sub-header!\n\nYou can also input [links](https://www.freecodecamp.com)\n\nAs well as nifty code stuff, \\`<div>like this!</div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\n1. List items are a thing too!\n1. So go ahead and use those.\n1. You can start each one with a 1\n\n> We all love block quotes!\n> They make things look fancy.\n> So let's quote things. All the time. In blocks!\n\nImages can be embedded too:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}